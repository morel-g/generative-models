from torch.utils.data import DataLoader
import torch
import pytorch_lightning as pl

from src.eval.plot_text_utils import save_strings_to_png, save_text_animation
from src.eval.plot_utils import get_titles
from src.case import Case
from src.utils import ensure_directory_exists
from src.data_manager.text_data_utils import TextDataUtils


@torch.no_grad()
def compute_text_outputs(
    net: pl.LightningModule,
    val_dataset: DataLoader,
    output_dir: str,
):
    """
    Computes and saves text outputs generated by the neural network.

    Parameters:
    - net (pl.LightningModule): The neural network model.
    - val_dataset (DataLoader): The validation dataset.
    - output_dir (str): The directory to save the output.

    Returns:
    - None
    """
    ensure_directory_exists(output_dir)
    val_dataloader = DataLoader(val_dataset, batch_size=5)

    tokenizer_name = net.params.scheme_params.get("tokenizer_name", Case.gpt2)
    for x in val_dataloader:
        list_str = TextDataUtils.decode_tokens(x, tokenizer_name)
        save_strings_to_png(list_str, output_dir, name="True_samples.png")
        break

    # sample_text(net, output_dir, name, nb_samples=5)
    x_traj = net.sample(nb_samples=5, return_trajectories=True)
    titles = get_titles(net, forward=False)
    samples_str = TextDataUtils.decode_tokens(x_traj[-1], tokenizer_name)
    save_strings_to_png(samples_str, output_dir, name="final_samples.png")

    traj_str = TextDataUtils.decode_list_tokens(x_traj, tokenizer_name)
    save_text_trajectories(traj_str, output_dir, name="trajectory", titles=titles)


def save_text_trajectories(
    traj: list[str], output_dir: str, name: str, titles: list[str] = None
) -> None:
    """
    Saves text trajectories as animations.

    Parameters:
    - traj (list[str]): The text trajectories.
    - output_dir (str): The directory to save the output.
    - name (str): The name of the output file.

    Returns:
    - None
    """
    # Assume all samples have the same length
    nb_samples = len(traj[0])

    for i in range(nb_samples):
        traj_i = [x[i] for x in traj]
        save_text_animation(traj_i, output_dir, name + "_" + str(i), titles=titles)


def sample_text(
    net: pl.LightningModule, output_dir: str, name: str, nb_samples: int = 5
):
    """
    Samples text from the neural network and saves it as an image.

    Parameters:
    - net (pl.LightningModule): The neural network model.
    - output_dir (str): The directory to save the output.
    - name (str): The name of the output file.
    - nb_samples (int, optional, default=5): The number of samples to generate.

    Returns:
    - None
    """
    ensure_directory_exists(output_dir)
    x = net.sample(nb_samples)
    tokenizer_name = net.params.scheme_params.get("tokenizer_name", Case.gpt2)
    samples_str = TextDataUtils.decode_tokens(x, tokenizer_name)
    save_strings_to_png(samples_str, output_dir, name=name)
