import torch
import matplotlib.pyplot as plt
import cartopy.crs as ccrs
import pytorch_lightning as pl
from torch.utils.data import DataLoader
from src.utils import ensure_directory_exists
from src.eval.plot_utils import save_video, figure_to_data, save_figure
from src.eval.plot_utils import get_titles
from src.data_manager.manifold_data_utils import ManifoldDataUtils


def sample_manifold(
    net: pl.LightningModule, output_dir: str, name: str, nb_samples: int = 1000
):
    x = net.sample(nb_samples, return_trajectories=False).cpu()
    fig = plot_sphere(ManifoldDataUtils.latlon_from_cartesian(x))
    save_figure(output_dir, fig, name)


@torch.no_grad()
def compute_manifold_outputs(
    net: pl.LightningModule,
    val_dataset: DataLoader,
    output_dir: str,
):
    """
    Computes and saves text outputs generated by the neural network.

    Parameters:
    - net (pl.LightningModule): The neural network model.
    - val_dataset (DataLoader): The validation dataset.
    - output_dir (str): The directory to save the output.

    Returns:
    - None
    """
    ensure_directory_exists(output_dir)
    nb_samples = 6000
    x_traj = net.sample(nb_samples, return_trajectories=True)
    titles = get_titles(net, forward=False)
    figures = []
    for i, xi in enumerate(x_traj):
        fig = plot_sphere(ManifoldDataUtils.latlon_from_cartesian(xi), title=titles[i])
        figures.append(figure_to_data(fig))
        plt.close()
    save_video(output_dir, figures, "trajectories")

    sample_manifold(net, output_dir, name="final samples", nb_samples=nb_samples)


def plot_sphere(x, title=None):
    # Assuming your latitude and longitude data are stored in numpy_array
    latitudes = x[:, 0]  # First column (0-indexed)
    longitudes = x[:, 1]  # Second column

    # Create a plot with the PlateCarree projection
    fig = plt.figure(figsize=(10, 5))
    ax = plt.axes(projection=ccrs.PlateCarree())
    ax.stock_img()  # Adds a stock image to give the map a more detailed look

    # Plotting the points
    plt.scatter(
        longitudes, latitudes, color="blue", marker="o", s=5, transform=ccrs.Geodetic()
    )

    if title is not None:
        plt.title(title)

    # Adding gridlines and features
    ax.gridlines(draw_labels=True, dms=True, x_inline=False, y_inline=False)
    ax.coastlines()  # Adds coastlines for reference
    return fig
